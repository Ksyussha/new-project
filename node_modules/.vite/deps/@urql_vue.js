import "./chunk-F2NDRTGQ.js";
import {
  G,
  J,
  L,
  N,
  W,
  cacheExchange,
  composeExchanges,
  createRequest,
  debugExchange,
  dedupExchange,
  errorExchange,
  fetchExchange,
  formatDocument,
  getOperationName,
  gql,
  makeErrorResult,
  makeOperation,
  makeResult,
  maskTypename,
  mergeResultPatch,
  o,
  onEnd$1,
  ssrExchange,
  stringifyVariables,
  subscriptionExchange,
  take$1,
  toPromise$1
} from "./chunk-Y42QZWRG.js";
import {
  getCurrentInstance,
  inject,
  onBeforeUnmount,
  onMounted,
  provide,
  watchEffect
} from "./chunk-Y2PUVVUE.js";
import {
  isRef,
  reactive,
  ref
} from "./chunk-2K6ABT6X.js";
import "./chunk-6LOWPV43.js";

// node_modules/@urql/vue/dist/urql-vue.mjs
function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var u = 1; u < arguments.length; u++) {
      var n = arguments[u];
      for (var r in n) {
        if (Object.prototype.hasOwnProperty.call(n, r)) {
          e[r] = n[r];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}
function provideClient(u) {
  var a;
  if (!isRef(u)) {
    a = ref(u instanceof J ? u : new J(u));
  } else {
    a = u;
  }
  provide("$urql", a);
  return a.value;
}
function install(u, t) {
  var a;
  if (!isRef(t)) {
    a = ref(t instanceof J ? t : new J(t));
  } else {
    a = t;
  }
  u.provide("$urql", a);
}
function useClient() {
  if (!getCurrentInstance()) {
    throw new Error("use* functions may only be called during the `setup()` or other lifecycle hooks.");
  }
  var e = inject("$urql");
  if (!e) {
    throw new Error("No urql Client was provided. Did you forget to install the plugin or call `provideClient` in a parent?");
  }
  return e;
}
function unwrapPossibleProxy(e) {
  return e && isRef(e) ? e.value : e;
}
var y = {
  flush: "pre"
};
function useQuery(e) {
  return callUseQuery(e);
}
function callUseQuery(e, t, a) {
  if (t === void 0) {
    t = useClient();
  }
  if (a === void 0) {
    a = [];
  }
  var i = reactive(e);
  var l = ref();
  var v = ref(false);
  var p = ref(false);
  var d = ref();
  var b2 = ref();
  var h = ref();
  var x = isRef(e.pause) ? e.pause : ref(!!e.pause);
  var w = ref(createRequest(i.query, unwrapPossibleProxy(i.variables)));
  var P = ref();
  a.push(watchEffect(function() {
    var e2 = createRequest(i.query, unwrapPossibleProxy(i.variables));
    if (w.value.key !== e2.key) {
      w.value = e2;
    }
  }, y));
  a.push(watchEffect(function() {
    P.value = !x.value ? t.value.executeQuery(w.value, _extends({}, {
      requestPolicy: i.requestPolicy
    }, i.context)) : void 0;
  }, y));
  var Q = {
    data: l,
    stale: v,
    error: d,
    operation: b2,
    extensions: h,
    fetching: p,
    isPaused: x,
    executeQuery: function executeQuery(e2) {
      var u = P.value = t.value.executeQuery(w.value, _extends({}, {
        requestPolicy: i.requestPolicy
      }, i.context, e2));
      return _extends({}, S, {
        then: function then(e3, n) {
          return new Promise(function(e4) {
            var n2 = false;
            var r = N(function() {
              if (!Q.fetching.value && !Q.stale.value) {
                if (r) {
                  r.unsubscribe();
                }
                n2 = true;
                e4(Q);
              }
            })(u);
            if (n2) {
              r.unsubscribe();
            }
          }).then(e3, n);
        }
      });
    },
    pause: function pause() {
      x.value = true;
    },
    resume: function resume() {
      x.value = false;
    }
  };
  a.push(watchEffect(function(e2) {
    if (P.value) {
      p.value = true;
      v.value = false;
      e2(N(function(e3) {
        l.value = e3.data;
        v.value = !!e3.stale;
        p.value = false;
        d.value = e3.error;
        b2.value = e3.operation;
        h.value = e3.extensions;
      })(onEnd$1(function() {
        p.value = false;
        v.value = false;
      })(P.value)).unsubscribe);
    } else {
      p.value = false;
      v.value = false;
    }
  }, {
    flush: "sync"
  }));
  var S = _extends({}, Q, {
    then: function then(e2, u) {
      return new Promise(function(e3) {
        if (!P.value) {
          return e3(Q);
        }
        var u2 = false;
        var n = N(function() {
          if (!Q.fetching.value && !Q.stale.value) {
            if (n) {
              n.unsubscribe();
            }
            u2 = true;
            e3(Q);
          }
        })(P.value);
        if (u2) {
          n.unsubscribe();
        }
      }).then(e2, u);
    }
  });
  return S;
}
function useMutation(e) {
  return callUseMutation(e);
}
function callUseMutation(e, n) {
  if (n === void 0) {
    n = useClient();
  }
  var t = ref();
  var a = ref(false);
  var i = ref(false);
  var o2 = ref();
  var s = ref();
  var l = ref();
  return {
    data: t,
    stale: a,
    fetching: i,
    error: o2,
    operation: s,
    extensions: l,
    executeMutation: function executeMutation(r, v) {
      i.value = true;
      return toPromise$1(take$1(1)(n.value.executeMutation(createRequest(e, unwrapPossibleProxy(r)), v || {}))).then(function(e2) {
        t.value = e2.data;
        a.value = !!e2.stale;
        i.value = false;
        o2.value = e2.error;
        s.value = e2.operation;
        l.value = e2.extensions;
        return e2;
      });
    }
  };
}
var b = {
  flush: "pre"
};
function useSubscription(e, u) {
  return callUseSubscription(e, u);
}
function callUseSubscription(e, t, a, i) {
  if (a === void 0) {
    a = useClient();
  }
  if (i === void 0) {
    i = [];
  }
  var l = reactive(e);
  var v = ref();
  var p = ref(false);
  var d = ref(false);
  var y2 = ref();
  var h = ref();
  var x = ref();
  var w = ref(t);
  var P = isRef(e.pause) ? e.pause : ref(!!e.pause);
  var Q = ref(createRequest(l.query, unwrapPossibleProxy(l.variables)));
  var S = ref();
  i.push(watchEffect(function() {
    var e2 = createRequest(l.query, unwrapPossibleProxy(l.variables));
    if (Q.value.key !== e2.key) {
      Q.value = e2;
    }
  }, b));
  i.push(watchEffect(function() {
    S.value = !P.value ? a.value.executeSubscription(Q.value, _extends({}, l.context)) : void 0;
  }, b));
  i.push(watchEffect(function(e2) {
    if (S.value) {
      d.value = true;
      e2(N(function(e3) {
        d.value = true;
        v.value = e3.data !== void 0 ? typeof w.value == "function" ? w.value(v.value, e3.data) : e3.data : e3.data, y2.value = e3.error;
        x.value = e3.extensions;
        p.value = !!e3.stale;
        h.value = e3.operation;
      })(onEnd$1(function() {
        d.value = false;
      })(S.value)).unsubscribe);
    } else {
      d.value = false;
    }
  }, b));
  var m = {
    data: v,
    stale: p,
    error: y2,
    operation: h,
    extensions: x,
    fetching: d,
    isPaused: P,
    executeSubscription: function executeSubscription(e2) {
      S.value = a.value.executeSubscription(Q.value, _extends({}, l.context, e2));
      return m;
    },
    pause: function pause() {
      P.value = true;
    },
    resume: function resume() {
      P.value = false;
    }
  };
  return m;
}
function useClientHandle() {
  var e = useClient();
  var u = [];
  onBeforeUnmount(function() {
    var e2;
    while (e2 = u.shift()) {
      e2();
    }
  });
  var n = {
    client: e.value,
    useQuery: function useQuery2(n2) {
      return callUseQuery(n2, e, u);
    },
    useSubscription: function useSubscription2(n2, r) {
      return callUseSubscription(n2, r, e, u);
    },
    useMutation: function useMutation2(u2) {
      return callUseMutation(u2, e);
    }
  };
  if (true) {
    onMounted(function() {
      _extends(n, {
        useQuery: function useQuery2(n2) {
          if (!getCurrentInstance()) {
            throw new Error("`handle.useQuery()` should only be called in the `setup()` or a lifecycle hook.");
          }
          return callUseQuery(n2, e, u);
        },
        useSubscription: function useSubscription2(n2, r) {
          if (!getCurrentInstance()) {
            throw new Error("`handle.useSubscription()` should only be called in the `setup()` or a lifecycle hook.");
          }
          return callUseSubscription(n2, r, e, u);
        }
      });
    });
  }
  return n;
}
var urql_vue_default = install;

// dep:@urql_vue
var urql_vue_default2 = urql_vue_default;
export {
  J as Client,
  o as CombinedError,
  cacheExchange,
  composeExchanges,
  W as createClient,
  createRequest,
  debugExchange,
  dedupExchange,
  urql_vue_default2 as default,
  L as defaultExchanges,
  errorExchange,
  G as fallbackExchangeIO,
  fetchExchange,
  formatDocument,
  getOperationName,
  gql,
  install,
  makeErrorResult,
  makeOperation,
  makeResult,
  maskTypename,
  mergeResultPatch,
  provideClient,
  ssrExchange,
  stringifyVariables,
  subscriptionExchange,
  useClientHandle,
  useMutation,
  useQuery,
  useSubscription
};
//# sourceMappingURL=@urql_vue.js.map
